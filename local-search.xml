<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>我的2022年终总结</title>
    <link href="/2022/12/28/%E6%88%91%E7%9A%842022%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    <url>/2022/12/28/%E6%88%91%E7%9A%842022%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h2 id="我的2022年终总结"><a href="#我的2022年终总结" class="headerlink" title="我的2022年终总结"></a>我的2022年终总结</h2><p>马上就是2023了，每年最后几天开始期待满满下一年，又回味满满这一年，这一年人生百态，也不是一转眼，每个月都有每个月的印记，都深深牢记。</p><hr><h3 id="关于工作"><a href="#关于工作" class="headerlink" title="关于工作"></a>关于工作</h3><p>【回顾】<br>2022这一年工作上分三大阶段进展，以628为界限，上半年负责整个多租户体系搭建与上线，配合sso单点登录这块融为一个大服务，业务量也真正达到了40WDAU。随之628事故之后，整个人工作路线和节奏都发生了变化，后面开始不断梳理总结，准备新的技能线，直到9月开始换了工作，直到现在12月底，新项目也到了开始筹备上线阶段。</p><p>后半年主要是对自己的技能认知加以巩固，对于服务之间通讯问题，思考更多隐性存在问题，并提出合理解决方案，在团队内持续输出。积累了大量项目上沟通技巧和落实文档的经验。</p><p>这一年初参与翻译的go101社区的关于性能篇的书籍，终于在年终时候出版了，算是对自己的一个小小的成就吧。</p><p>【展望】<br>2023我希望自己能够做出以下4点</p><ol><li>持续发布技术文章，3篇，基于过往项目点为根据，切实解决的问题提出的分析文章</li><li>团队内将广告平台如期上线，并迭代，要解决生产遇到的问题，对于个人职业发展有很大帮助，绩效上起码卷出2个月的S等级。</li><li>rust这块基于现在的模块做一个加解密工具，试着发布开源下，看看社区反馈</li><li>在读书方面，看下linux系统原理，想更多机会去应变自如的处理k8s中pod内部与外部配置网络机制，扎实下自己的理论基础。</li></ol><hr><h3 id="关于生活"><a href="#关于生活" class="headerlink" title="关于生活"></a>关于生活</h3><p>【回顾】<br>今年年初经历了上海的三个月，居家的生活让自己更加认识学会和自己相处，除了日常做饭，在生活三餐中时刻规划着下一天的餐食，保证自己在完全没有外卖和快递的情况下顺利生活。实话说自己储备并不是很多，总价700多块钱，3月开始的时候还是去Costco采购了生活物资，以至于使用到6月逐渐消耗殆尽。</p><p>看到很多人团购各种物资，我一个都没参与，有时候觉得在这种大环境大试炼下，自己的生活还是很简单的很多，吃喝一直都是自给，不要求过多的物质。</p><p>这一年上半年因为公司更看重疫情，在居家生活中更多，没有什么合适的机会去旅游，说说有趣的事，我在51封控时期，从小区跑出来，骑行了30km，那一天上海开始变热了，一个人骑在外面空旷的街道上，那一刻感到无比的自由，幸福感充实着自己。</p><p>下半年国庆时间也成功约了骑行，在上海骑了个中国公鸡图 70km，也是一个不错的小里程碑。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>golang在arm64架构打包amd64镜像</title>
    <link href="/2022/11/02/golang%E5%9C%A8arm64%E6%9E%B6%E6%9E%84%E6%89%93%E5%8C%85amd64%E9%95%9C%E5%83%8F/"/>
    <url>/2022/11/02/golang%E5%9C%A8arm64%E6%9E%B6%E6%9E%84%E6%89%93%E5%8C%85amd64%E9%95%9C%E5%83%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">macOS</span>: <span class="hljs-number">12</span>.<span class="hljs-number">6</span> (Monterey)<span class="hljs-attribute">gcc</span> version: Apple clang version <span class="hljs-number">14</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span> (arm64-apple-darwin21.<span class="hljs-number">6</span>.<span class="hljs-number">0</span>)<span class="hljs-attribute">Ubuntu</span>: <span class="hljs-number">16</span>.<span class="hljs-number">04</span>.<span class="hljs-number">6</span> LTS<span class="hljs-attribute">CentOS</span>: Linux release <span class="hljs-number">8</span>.<span class="hljs-number">4</span>.<span class="hljs-number">2105</span> (Core)</code></pre></div><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><div class="code-wrapper"><pre><code class="hljs">期望：在k8s上走流水线流程。过程：需要先依赖golang的镜像，来编译二进制文件，但是由于自己是M2 mac，官方拉去镜像后，打包到私有镜像仓库，然后在dockerfile中编写依赖，这时镜像编译成功，但是无法运行，会报错。</code></pre></div><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><div class="code-wrapper"><pre><code class="hljs">发现了问题就是在 mac M2 上打包镜像，如果不指定架构参数的话，会默认以arm架构打包镜像，最后打包出来的镜像，只能编译在arm机器上。所以这里拉去官方镜像后需要指定架构参数 ：--platform=linux/amd64</code></pre></div><p>最开始pull 公共镜像golang1.18</p><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> pull golang:<span class="hljs-number">1</span>.<span class="hljs-number">18</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs livescript"><span class="hljs-comment"># dockefile</span>FROM --platform=linux/amd64 golang:<span class="hljs-number">1.18</span>-alpine3.<span class="hljs-number">16</span>RUN apk --<span class="hljs-literal">no</span>-cache add tzdata gcc <span class="hljs-string">\</span>    git <span class="hljs-string">\</span>    zlib-dev <span class="hljs-string">\</span>    zstd-libs <span class="hljs-string">\</span>    libsasl <span class="hljs-string">\</span>    lz4-dev <span class="hljs-string">\</span>    zstd-dev <span class="hljs-string">\</span>    libc-dev  &amp;&amp; <span class="hljs-string">\</span>    ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime &amp;&amp; <span class="hljs-string">\</span>    echo <span class="hljs-string">&quot;Asia/Shanghai&quot;</span> &gt; /etc/timezone</code></pre></div><div class="code-wrapper"><pre><code class="hljs">以这个dockerfile为基础镜像，然后在本地打包，push</code></pre></div><div class="code-wrapper"><pre><code class="hljs awk"><span class="hljs-comment"># arm mac 本地打包</span>docker build .<span class="hljs-regexp">/ -t [你的私有镜像registry].aliyuncs.com/</span>public/golang:<span class="hljs-number">1.18</span><span class="hljs-comment"># 打包完成后推送到私有仓库</span>docker push [你的私有镜像registry].aliyuncs.com<span class="hljs-regexp">/public/g</span>olang:<span class="hljs-number">1.18</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs">推送完后，去镜像仓库检查下是否推送成功，然后下一步就是 玩 自己的业务代码dockerfile了，这里举个例子：</code></pre></div><div class="code-wrapper"><pre><code class="hljs">FROM  [你的私有镜像registry].aliyuncs.com/public/golang:1.18ADD netrc /root/.netrcWORKDIR /buildADD . /buildRUN GO111MODULE=on GOOS=linux GOARCH=amd64 CGO_ENABLED=1 GOPROXY=&quot;https://goproxy.cn,direct&quot; go build -o /bin/main -v -a -ldflags &#39;-w -s&#39; main.goWORKDIR /binENTRYPOINT [ &quot;coding&quot; ]</code></pre></div><p>然后整体流程就走通了</p><p>大家若遇到其他问题，可以留言，我会及时跟进解决方案。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://github.com/docker/for-mac/issues/6356">https://github.com/docker/for-mac/issues/6356</a></p><p><a href="https://www.reddit.com/r/docker/comments/ray2wc/running_linuxamd64_images_on_linuxarm64/">https://www.reddit.com/r/docker/comments/ray2wc/running_linuxamd64_images_on_linuxarm64/</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><div class="code-wrapper"><pre><code class="hljs">这次就是解决了再不同架构平台上打包镜像，然后依赖该镜像，在amd架构上运行的问题。要多看文档，多查资料，看issue，这样才有具体眉目，希望大家少走弯路。</code></pre></div>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>解决github多个帐号提交不同仓库</title>
    <link href="/2022/10/29/%E8%A7%A3%E5%86%B3github%E5%A4%9A%E4%B8%AA%E5%B8%90%E5%8F%B7%E6%8F%90%E4%BA%A4%E4%B8%8D%E5%90%8C%E4%BB%93%E5%BA%93/"/>
    <url>/2022/10/29/%E8%A7%A3%E5%86%B3github%E5%A4%9A%E4%B8%AA%E5%B8%90%E5%8F%B7%E6%8F%90%E4%BA%A4%E4%B8%8D%E5%90%8C%E4%BB%93%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<h2 id="解决github多个帐号提交不同仓库"><a href="#解决github多个帐号提交不同仓库" class="headerlink" title="解决github多个帐号提交不同仓库"></a>解决github多个帐号提交不同仓库</h2><ul><li>经常遇到本地机器服务于多个github帐号&#x2F;gitlab&#x2F;codeup ，所以这里解决的就是这种不能提交的情况</li></ul><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><ol><li>2个github帐号  如： account_one  , account_two</li><li>本地用ssh在 【~&#x2F;.ssh】 目录下生成2个帐号的公钥,分别复制两个账号 xxx.pub <div class="code-wrapper"><pre><code class="hljs bash">ssh-keygen -t rsa -C <span class="hljs-string">&quot;account_one@github.com&quot;</span> -f ~/.ssh/id_rsa.account_onessh-keygen -t rsa -C <span class="hljs-string">&quot;account_two@github.com&quot;</span> -f ~/.ssh/id_rsa.account_two</code></pre></div></li><li>分别在两个github帐号中添加刚刚复制的公钥到两个仓库配置中，分别保存。<br><img src="/images/WechatIMG413.png"></li><li>重点：这一步完成后就是配置本地：【~&#x2F;ssh&#x2F;config】文件<div class="code-wrapper"><pre><code class="hljs conf"># github  account_one   Host github # 这里用一个别名github 来代替github.com 域名   HostName github.com   User account_one   PreferredAuthentications publickey  IdentityFile ~/.ssh/id_rsa.account_one# github account_two    Host github2  # 这里用一个别名github2 来代替github.com 域名   HostName github.com   User account_two   PreferredAuthentications publickey   IdentityFile ~/.ssh/id_rsa.account_two</code></pre></div></li><li>完成之后保存，然后测试是否成功</li></ol><p><img src="/images/7271681910182.jpg"></p><ul><li>以上是我个人情况， 用例可以是<ul><li>ssh -T github </li><li>ssh -T github2</li></ul></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/10/27/hello-world/"/>
    <url>/2022/10/27/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>My New Post</title>
    <link href="/2022/10/27/My-New-Post/"/>
    <url>/2022/10/27/My-New-Post/</url>
    
    <content type="html"><![CDATA[<h3 id="Title"><a href="#Title" class="headerlink" title="Title"></a>Title</h3><ul><li>Goland make feature</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  
  
  
  <entry>
    <title>about</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[<h3 id="关于这里"><a href="#关于这里" class="headerlink" title="关于这里"></a>关于这里</h3><div class="code-wrapper"><pre><code class="hljs">永远年轻,永远热泪盈眶。</code></pre></div><ul><li>专注于Golang、云原生、Vue、React、软件架构、 开源社区</li></ul>]]></content>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[]]></content>
    
  </entry>
  
  
  
</search>
